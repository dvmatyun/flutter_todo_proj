1. Rx - реактивные расширения
- Stream ~= Observable
- StreamController ~= Subject (три разновидности):
    - PublishSubjects (может "опоздать", если подписался после публикации)
    - BehaviourSubject (каждый новый подписчик получит сперва последнее принятое значение)
    - ReplaySubject (новый подписчик получается всё, что было)
Из функций: 
- subject.map<User>((jsonString) => User.fromJson(jsonString)).listen((user) => print(user.toString()));

//последнее значение после паузы:
- subject.debounce(new Duration(milliseconds: 500)).listen((s) => print(s));

- subject.expand (из одного события сделать последовательность событий)
- subject.mergeWith (из двух потоков сделать один, последовательность не гарантируется: [1,2,3] [5,6,7] => [1,5,2,6,3,7])
- subject.zipWith (из двух потоков так же сделать один, но он не отправляет данные, как только получает элемент от одного из своих исходных потоков. Когда оба дали по событию - объединить их по функции.
практичное применение — если вам нужно дождаться двух асинхронных функций, которые возвращают Future, и вы хотите обработать данные, как только будут возвращены оба результата)
- subject.combineLatest2 ... combineLatest9 (комбинирует N стримов, таким образом, что из каждого берет последнее значение. Необходимо чтоб в каждый положили по значению)
- subject.distinct (если значение нового элемента отличается от последнего)
- subject.asyncMap
- subject.close() == streamController.dispose()

2. SOLID:
    -Single Responsibility Principle:
    класс выполняет какую то одну функцию. 
    Репозиторий - ходит к API, Валидатор - проверяет, StateManager - управляет состояниями, View - эмитит ивенты.
    
    -Opened/Closed Principle:
    